{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-typescript-1/","result":{"data":{"site":{"siteMetadata":{"title":"Kyle.dot"}},"markdownRemark":{"id":"bb63b0ce-92a6-5930-a346-c2c4260714e3","excerpt":"The following text is a summary based on my understanding after reading \"Effective \" 1. Relationship Between TypeScript and JavaScript  is a unique language in‚Ä¶","html":"<blockquote>\n<p>The following text is a summary based on my understanding after reading \"<strong>Effective <code class=\"language-text\">TypeScript</code></strong>\"</p>\n</blockquote>\n<h2>1. Relationship Between TypeScript and JavaScript</h2>\n<p><code class=\"language-text\">TypeScript</code> is a unique language in terms of its usage. It ultimately compiles into <code class=\"language-text\">JavaScript</code> and is executed as <code class=\"language-text\">JavaScript</code>.</p>\n<p>In terms of its type system, <code class=\"language-text\">TypeScript</code> is different from other languages.</p>\n<blockquote>\n<p>üíø You may have often heard the statement, \"<code class=\"language-text\">TypeScript</code> is a superset of <code class=\"language-text\">JavaScript</code> with types.\"</p>\n</blockquote>\n<p>All <code class=\"language-text\">JavaScript</code> code is <code class=\"language-text\">TypeScript</code> code ‚û°Ô∏è <strong>True</strong> <br/> All <code class=\"language-text\">TypeScript</code> code is <code class=\"language-text\">JavaScript</code> code ‚û°Ô∏è <strong>False</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">City</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tstate<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cities<span class=\"token operator\">:</span> City<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Seattle'</span><span class=\"token punctuation\">,</span> stete<span class=\"token operator\">:</span> <span class=\"token string\">'Washington'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Los Angeles'</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> <span class=\"token string\">'California'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Atlanta'</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> <span class=\"token string\">'Georgia'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the code above, if there is a typo in the property declaration such as stete, <code class=\"language-text\">TypeScript</code>'s type checker will catch the error and prevent potential issues that may occur in the future before runtime.</p>\n<p>Therefore, <code class=\"language-text\">TypeScript</code> programs can be seen as a superset containing both <code class=\"language-text\">JavaScript</code> programs and <code class=\"language-text\">TypeScript</code> programs that have passed type checking.</p>\n<p>Type inference plays a crucial role in <code class=\"language-text\">TypeScript</code>, and one of the goals of <code class=\"language-text\">TypeScript</code>'s type checker (type system) is to find errors in code before runtime. This is why <code class=\"language-text\">TypeScript</code> is also referred to as a \"static type language.\"</p>\n<p>Thus, we can say that the type system in <code class=\"language-text\">TypeScript</code> \"models\" the runtime behavior of <code class=\"language-text\">JavaScript</code>.</p>\n<br/>\n<br/>\n<hr>\n<h2>2. TypeScript Configuration</h2>\n<p>Where to find source files? What kinds of output to generate? You can configure <code class=\"language-text\">TypeScript</code> compilation settings through the <code class=\"language-text\">tsconfig.json</code> file using the <code class=\"language-text\">compilerOptions</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// tsconfig.json</span>\n\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string-property property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string-property property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When applying <code class=\"language-text\">TypeScript</code> to a <code class=\"language-text\">React</code> project, it's important to understand the settings for <code class=\"language-text\">noImplicitAny</code> and <code class=\"language-text\">strictNullChecks</code>.</p>\n<br/>\n<h4>1. noImplicitAny</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></code></pre></div>\n<p>If <code class=\"language-text\">noImplicitAny</code> is set to <code class=\"language-text\">false</code>, the type checker will not show any errors. However, if <code class=\"language-text\">noImplicitAny</code> is set to <code class=\"language-text\">true</code>, the type checker will display the following error:</p>\n<p>Parameter <code class=\"language-text\">a</code> implicitly has an <code class=\"language-text\">any</code> type.<br/> Parameter <code class=\"language-text\">a</code> implicitly has an <code class=\"language-text\">any</code> type.</p>\n<br/>\n<h4>2. strictNullChecks</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If <code class=\"language-text\">strictNullChecks</code> is set to false, no errors will be shown. However, if it is set to <code class=\"language-text\">true</code>, it will display the error <b>\"Type <code class=\"language-text\">null</code> is not assignable to type <code class=\"language-text\">number</code>\"</b> for <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code> values.</p>\n<p>If you intentionally want to allow <code class=\"language-text\">null</code>, you can use <strong>tagged union types</strong> (discriminated union types) to prevent errors:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When <code class=\"language-text\">strictNullChecks</code> is <code class=\"language-text\">true</code>, you need to use <code class=\"language-text\">null</code> checks or type assertions to prevent errors like <b>\"<code class=\"language-text\">undefined</code> is not an object.\"</b> For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// null check</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$elem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t$elem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// type assertion</span>\n\n<span class=\"token comment\">// 1</span>\n$elem<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>-> In the case of 1, since the <strong>DOM</strong> can be <code class=\"language-text\">null</code>, you can prevent errors by checking for <code class=\"language-text\">null</code> or using <strong>type assertions</strong>. In the case of 2, you can use the <strong>\"type assertion\"</strong> syntax, <code class=\"language-text\">as</code>, to prevent errors.</p>\n<p>Therefore, it is recommended to set the <code class=\"language-text\">noImplicitAny</code> option to <code class=\"language-text\">true</code>, except when converting a <code class=\"language-text\">JavaScript</code> project to <code class=\"language-text\">TypeScript</code>. And to prevent runtime errors like <b>\"<code class=\"language-text\">undefined</code> is not an object,\"</b> it is recommended to set the <code class=\"language-text\">strictNullChecks</code> option to <code class=\"language-text\">true</code>.</p>\n<p>Additionally, to prevent errors through strict type checking in <code class=\"language-text\">TypeScript</code>, it is recommended to set the strict option to true.</p>\n<br/>\n<br/>\n<hr>\n<h2>3. Understanding Code Generation and Irrelevance of Types at Runtime</h2>\n<h3>The TypeScript compiler performs the following tasks:</h3>\n<p><strong>Transpiling (translating + compiling)</strong> the latest <code class=\"language-text\">JavaScript</code>/<code class=\"language-text\">TypeScript</code> code to an older version of <code class=\"language-text\">JavaScript</code> so that it can run in browsers. Checking for type errors in the code. ‚Üí These two tasks are completely independent. Transpiling <code class=\"language-text\">TypeScript</code> to <code class=\"language-text\">JavaScript</code> does not affect the types in the code at all.</p>\n<blockquote>\n<p>üíø This means that code with type errors can still be compiled. It is more accurate to say that if there are type errors, there are errors in type checking.</p>\n</blockquote>\n<blockquote>\n<p>üíø Type checking is not possible at runtime. In fact, during the compilation process when code is translated into <code class=\"language-text\">JavaScript</code>, all type declaration statements such as <code class=\"language-text\">interfaces</code> and <code class=\"language-text\">type aliases</code> are removed.</p>\n</blockquote>\n<p>This indicates that code generation is independent of runtime behavior and performance. Ultimately, <code class=\"language-text\">TypeScript</code> types do not affect runtime behavior or performance.</p>\n<hr>\n<br/>\n<p>To use <code class=\"language-text\">TypeScript</code> types at runtime, you can use <strong>\"tagged union types\"</strong> and <strong>\"property checking (kind) method,\"</strong> or utilize <strong>\"classes\"</strong> to provide both <code class=\"language-text\">TypeScript</code> types and runtime values.</p>\n<h4>1. Tagged union types and property checking (kind) method</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n\tkind<span class=\"token operator\">:</span> <span class=\"token string\">'animal'</span><span class=\"token punctuation\">;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n\tkind<span class=\"token operator\">:</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Content</span> <span class=\"token operator\">=</span> Animal <span class=\"token operator\">|</span> Dog<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>content<span class=\"token operator\">:</span> Content<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'animal'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcontent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> type</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcontent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> type</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>2. Class + instanceof usage</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IsoscelesTriangle</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Triangle <span class=\"token operator\">|</span> IsoscelesTriangle<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculateArea</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Triangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">IsoscelesTriangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Type operations do not affect runtime behavior.</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> asNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> val <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">asNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\n<span class=\"token function\">asNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span></code></pre></div>\n<p>‚Üí The above code passes the type check, but after compilation, the <code class=\"language-text\">TypeScript</code>-specific code, such as the as number type assertion, is removed, and only the <code class=\"language-text\">JavaScript</code> code remains. Therefore, the type assertion code has no impact at runtime.</p>\n<p>Therefore, to refine values based on type definitions, you need to write code like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> asNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>üíø As a result, it is important to be cautious as runtime types and declared types can differ.</p>\n<br/>\n<br/>\n<hr>\n<h2>4. Getting Familiar with Structural Typing</h2>\n<p><code class=\"language-text\">JavaScript</code> can be considered a language based on duck typing.</p>\n<blockquote>\n<p>üíø <strong>Duck typing</strong> is the concept of considering an object to belong to a certain type if it has the variables and methods that conform to that type.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Line</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">NamedLine</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n\tx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculateLength</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">:</span> Line<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> l<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> l<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> l<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> line1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> line2<span class=\"token operator\">:</span> NamedLine <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'z'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">calculateLength</span><span class=\"token punctuation\">(</span>line1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2.23606797749979</span>\n<span class=\"token function\">calculateLength</span><span class=\"token punctuation\">(</span>line2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>In the above code, even though the object has the NamedLine interface, it can be passed as an argument to <code class=\"language-text\">calculateLength</code> without any issues. <code class=\"language-text\">TypeScript</code>, even during type checking, is intelligent enough to recognize that the object has properties <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> even though they are not explicitly defined in the <code class=\"language-text\">Line</code> interface. This is known as <strong>structural typing</strong>.</p>\n<blockquote>\n<p>üíø While writing functions, it is often assumed that the arguments used in function calls adhere strictly to the properties defined in the function's parameter type. However, in <code class=\"language-text\">TypeScript</code>, types have open properties instead of sealed properties.</p>\n</blockquote>\n<br/>\n<br/>\n<hr>\n<h2>5. Avoiding the use of any Type</h2>\n<p>Using the any type undermines the type checking system provided by <code class=\"language-text\">TypeScript</code> and makes it difficult to handle various runtime errors that may occur during <code class=\"language-text\">JavaScript</code> execution after <code class=\"language-text\">TypeScript</code> compilation.</p>\n<p>Moreover, when working collaboratively, it becomes challenging to understand the design structure of a service when any types are used extensively. Therefore, it is advisable to avoid using the any type and instead specify clear and explicit types.</p>\n<br/>\n<br/>\n<blockquote>\n<p>The above summary is based on my understanding while reading the book. If there are any additional concepts you would like me to explain, please let me know.</p>\n</blockquote>","frontmatter":{"title":"Effective TypeScript 1","date":"June 27, 2023","description":"This is a written summary based on my understanding after reading \"Effective TypeScript\"","category":"TypeScript"}},"previous":null,"next":{"fields":{"slug":"/move-my-blog/"},"frontmatter":{"title":"Moving a Blog"}}},"pageContext":{"id":"bb63b0ce-92a6-5930-a346-c2c4260714e3","previousPostId":null,"nextPostId":"10a92a37-3355-5f01-8c01-51bac79edb46"}},"staticQueryHashes":["707948987","805692932"],"slicesMap":{}}