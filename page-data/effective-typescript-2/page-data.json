{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-typescript-2/","result":{"data":{"site":{"siteMetadata":{"title":"Kyle.dot"}},"markdownRemark":{"id":"a568ad36-2a5a-5b29-9e60-2671c3690826","excerpt":"The following text is a summary based on my understanding after reading \"Effective TypeScript\" 6. Search Type System using IDE IDE means code editor, and vscode…","html":"<blockquote>\n<p>The following text is a summary based on my understanding after reading <strong>\"Effective TypeScript\"</strong></p>\n</blockquote>\n<h2>6. Search Type System using IDE</h2>\n<p>IDE means code editor, and <strong>vscode</strong> support <code class=\"language-text\">Typescript</code> tooling especially. And <strong>vscode</strong> is 90% made up of <code class=\"language-text\">Typescript</code>, if we check out the <strong>vscode</strong> repository.</p>\n<p>It's really nice to understand how Type System works using code editor(vscode), and how <code class=\"language-text\">TypeScript</code> infers types. Additionally, we have to check out <code class=\"language-text\">d.ts</code> file to get to know how <code class=\"language-text\">TypeScript</code> works.</p>\n<br/>\n<br/>\n<hr>\n<h2>7. Think of Type as set of values</h2>\n<p><code class=\"language-text\">JavaScript</code> is called as <strong>Dynamic Type Language</strong> which type is set on runtime dynamically. In a type-checking system with a type checker, the moment it checks for errors before compiling <code class=\"language-text\">TypeScript</code> code, it has something called a \"<strong>type</strong>\".</p>\n<p>It had better to say type as set of assignable values.</p>\n<h4>1. smallest set : the union</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It's impossible to assign the value on variable <code class=\"language-text\">x</code>, because the range of value which is declared as <code class=\"language-text\">never</code> type is the union.</p>\n<h4>2. Second smallest set: type that contains only one value - Unit Type or Literal Type</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Twelve</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>3. Third smallest set: Union Type</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">AB12</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'B'</span> <span class=\"token operator\">|</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Like the type above, <code class=\"language-text\">AB12</code> type can be the union using <code class=\"language-text\">Union Type</code>.</p>\n<blockquote>\n<p>💿 We may see the phrase \"assignable\" in <code class=\"language-text\">Typescript</code> errors. As a perspective of Collection, this phrase can be understood as subsets of ~ (types and their relationships) or elements of ~ (values - their relationships).</p>\n</blockquote>\n<h4>4. Fourth smallest set : Structural Typing with Interface</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Structural Typing Ruleset</strong> has not 'sealed' property which means some value can possess other values, but 'open/public' property</p>\n<p>For example, <code class=\"language-text\">&amp;</code> operator means <strong>'Intersection'</strong> of 2 types.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LifeSpan</span> <span class=\"token punctuation\">{</span>\n\tbirth<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n\tdeath<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonSpan</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> LifeSpan<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Since the 2 interfaces above don't have properties in common, we might think of <code class=\"language-text\">PersonSpan</code> type as the union such as <code class=\"language-text\">never</code> type.</p>\n<p>But, since a type declaration with <strong>Type Alias</strong> applies to a set of values rather than <strong>Interface</strong> property, values with additional properties can also be considered to be part of the set of the type. Thus, <strong>Intersection type</strong> that has the name, birth, and death properties would be part of the type Intersection.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> person<span class=\"token operator\">:</span> PersonSpan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'Kim'</span><span class=\"token punctuation\">,</span>\n\tbirth<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1912/06/23'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tdeath<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1954/06/07'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It would seem that applying the above features to unionize an inteface type would result in the result of an Intersection, but this is not the case.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">K</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">(</span>Person <span class=\"token operator\">|</span> LifeSpan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never 타입</span></code></pre></div>\n<br/>\n<p>A common way to declare the above <code class=\"language-text\">PersonSpan</code> type is to utilize <code class=\"language-text\">extends</code> keyword to create subtypes, which in the context of a set is to create a subset.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LifeSpan</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\tbirth<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n\tdeath<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you think about the keyword \"sub,\" you can create sub-classes of a class by inheriting from it using the <code class=\"language-text\">extends</code> keyword. So linguistically, we can say that there is an <strong>inheritance</strong> relationship, but from a set perspective, we can say that <code class=\"language-text\">Person</code> has a larger scope and that <code class=\"language-text\">LifeSpan</code> type, which has the properties of <code class=\"language-text\">Person</code>, is inside the scope of the Person type.</p>\n<p>The <code class=\"language-text\">extends</code> keyword is also used as a constraint method in <strong>Generic</strong> Types: it means a subset of some types.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> getValue <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> value <span class=\"token operator\">===</span> key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can infer that <code class=\"language-text\">K</code> is some type whose scope is a subset of string by the <code class=\"language-text\">extends</code> keyword.</p>\n<br/>\n<br/>\n<hr>\n<h2>8. Distinguish between symbols in type and value spaces</h2>\n<p><strong>Symbols</strong> in <code class=\"language-text\">Typescript</code> exist in either type space or value space. It's important to note even if they have the same name, they can represent different things depending on which space they belong to.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n\twidth<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\theight<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> Square <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Square <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">,</span> height <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It can be confused, because <code class=\"language-text\">Square</code> Symbol is being used to define <strong>interface</strong> and <strong>constructor</strong> function.</p>\n<p>The code below might be even more confusing.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'gildong'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'kim'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> email <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">,</span> subject<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Person</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> email<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (p: Person, subject: string, body: string) => Response</span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span>\n<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> email<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'function'</span></code></pre></div>\n<ul>\n<li>\n<p>As a perspective of <strong>Type</strong></p>\n<ul>\n<li><code class=\"language-text\">typeof</code> reads a value and returns a type. A <code class=\"language-text\">typeof</code> in a type space can be used as part of a larger type, or it can be named in a type declaration syntax utilizing a <strong>type alias</strong>.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>As a perspective of <strong>Value</strong></p>\n<ul>\n<li><code class=\"language-text\">typeof</code> is the typeof operator at <code class=\"language-text\">JavaScript</code> runtime, so it returns the corresponding type as a string.</li>\n</ul>\n<blockquote>\n<p>☕️ At the runtime, <code class=\"language-text\">JavaScript</code> returns the runtime type such as <code class=\"language-text\">number, string, boolean, undefined, object, function</code></p>\n</blockquote>\n</li>\n</ul>\n<p>The property accessor <code class=\"language-text\">[]</code> behaves the same when used as a type. Always utilize <code class=\"language-text\">[]</code> to get the type attribute of a property value that corresponds to a property key of an object.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> firstName<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'firstName'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span><span class=\"token string\">'firstName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The contents below are examples of a value space and a type space serving as different purposes.</p>\n<blockquote>\n<p>💿 <code class=\"language-text\">This</code> as a value is the this keyword in <code class=\"language-text\">JavaScript</code>. <br/> 🚀 this as a type is a <code class=\"language-text\">TypeScript</code> type of <code class=\"language-text\">this</code> called polymorphic this.</p>\n</blockquote>\n<blockquote>\n<p>💿 The <code class=\"language-text\">&amp;</code> and <code class=\"language-text\">|</code> in the value are the bitwise <code class=\"language-text\">AND</code> and <code class=\"language-text\">OR</code> operators.<br/> 🚀 types are called intersection and union types.</p>\n</blockquote>\n<blockquote>\n<p>💿 <code class=\"language-text\">const</code> in the value is used to declare constants. <br/> 🚀 as <code class=\"language-text\">const</code> changes in the type the inferred type of a literal or literal expression.</p>\n</blockquote>\n<blockquote>\n<p>💿 As used in the value, <code class=\"language-text\">extends</code> can be used to define subclasses of a parent class. <br/> 🚀 <code class=\"language-text\">extends</code> on types can be used as a qualifier for subtypes or generic types.</p>\n</blockquote>\n<blockquote>\n<p>💿 Additionally, keywords like <code class=\"language-text\">class</code> and <code class=\"language-text\">enum</code> can be used as both types and values.</p>\n</blockquote>\n<br/>\n<br/>\n<hr>\n<h2>9. Using Type Declaration instead of Type Assertion</h2>\n<h4>1. There are 2 options to set a type and assign a value to a variable</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Flower</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> rose<span class=\"token operator\">:</span> Flower <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'rose'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 선언</span>\n\n<span class=\"token keyword\">const</span> forsythia <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'forsythia'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Flower<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 단언</span></code></pre></div>\n<ul>\n<li>A type declaration checks that the value being assigned satisfies the interface.</li>\n<li>A type assertion is like <strong>telling the type checker to ignore an error</strong> because we force a type.</li>\n</ul>\n<h4>2. The type declaration of an arrow function can be ambiguous about the inferred type, sometimes.</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> flowers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'rose'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'forsythia'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sunflower'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>flower <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> flower <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Type '{ flower: string; }[]' is not assignable to type 'Flower[]'.</span></code></pre></div>\n<p>As a developer, you might infer from the above that the return value is an array type which has <code class=\"language-text\">Flower</code> Interface value, but the type checker will not recognize it as an interface named <code class=\"language-text\">Flower</code>.</p>\n<blockquote>\n<p>☕️ Because of the above issues, using type assertions can cause problems at runtime.</p>\n</blockquote>\n<p><strong>So, we check the type by declaring the return type of the arrow function, rather than asserting the type.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> flowers<span class=\"token operator\">:</span> Flower<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'rose'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'forsythia'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sunflower'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flower<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Flower <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> flower <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>3. Helpful Moment using Type Assertion</h4>\n<p>Because <code class=\"language-text\">Typescript</code> doesn't have access to the DOM, you need to actively utilize type assertions.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.plus-button'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// document.querySelector('.plus-button')</span>\n\t<span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token keyword\">as</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Because developers know something that <code class=\"language-text\">TypeScript</code> doesn't, developers can write type assertions with the keyword <code class=\"language-text\">as</code>.</p>\n<p>Or, we can use <code class=\"language-text\">!</code> to assert value is not possible <code class=\"language-text\">null</code>, alternatively.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> $elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLElement | null</span>\n<span class=\"token keyword\">const</span> $buttonElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLElement```</span></code></pre></div>\n<h5>Reasons for using Type Assertion above the 3 examples</h5>\n<ul>\n<li>#1 the <code class=\"language-text\">HTMLElement</code> type is a subtype of <code class=\"language-text\">HTMLElement | null</code>.</li>\n<li>#2 the type <code class=\"language-text\">HTMLButtonElement</code> is a subtype of <code class=\"language-text\">EventTarget</code>.</li>\n<li>#3 the type <code class=\"language-text\">Flower</code> is a subtype of <code class=\"language-text\">{ }</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Flower</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> $body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> $elem <span class=\"token operator\">=</span> $body <span class=\"token keyword\">as</span> Flower<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Conversion of type 'HTMLElement' to type 'Flower' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span></code></pre></div>\n<p>As shown above, code editor is saying that it would be a mistake to convert the <code class=\"language-text\">HTMLElement</code> type to the <code class=\"language-text\">Flower</code> type. If a type assertion is intentional, utilizing the <code class=\"language-text\">unknown</code> type might be useful.</p>\n<blockquote>\n<p>We can say that every type is a subtype of <code class=\"language-text\">unknown</code>, so assertions with <code class=\"language-text\">unknown</code> will always work.</p>\n<p>The <code class=\"language-text\">unknown</code> type assertion allows conversion between arbitrary types, but can introduce a dangerous situation where subsequent types are unpredictable.</p>\n</blockquote>\n<br/>\n<br/>\n<hr>\n<h2>10. Avoid Object Wrapper Type</h2>\n<p><code class=\"language-text\">JavaScript</code> has the character to freely convert between <strong>primitive</strong> and <strong>object</strong> types.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The method called <code class=\"language-text\">charAt</code> is not a method on a value of type string.</p>\n<p>In <code class=\"language-text\">JavaScript</code>, there's a lot of works going on internally when you use a <strong>string value</strong> in the code above. <code class=\"language-text\">JavaScript</code> doesn't have methods on values that are the <strong>string primitive type</strong>, but it does have methods on <strong>String object types</strong>.</p>\n<p>When we use a method like <code class=\"language-text\">charAt</code> on <strong>string primitive</strong>, <code class=\"language-text\">JavaScript</code> goes through the process of wrapping the value of <code class=\"language-text\">string</code> type into a <code class=\"language-text\">String</code> object, calling the method, and finally discarding the wrapped object.</p>\n<p>Similar to how the <strong>string primitive</strong> is automatically converted to a <strong>String wrapper object</strong>, other <strong>object wrapper types</strong> exist.</p>\n<ul>\n<li><code class=\"language-text\">number</code> ↔️ <code class=\"language-text\">Number</code></li>\n<li><code class=\"language-text\">boolean</code> ↔️ <code class=\"language-text\">Boolean</code></li>\n<li><code class=\"language-text\">symbol</code> ↔️ <code class=\"language-text\">Symbol</code></li>\n<li><code class=\"language-text\">bigint</code> ↔️ <code class=\"language-text\">BigInt</code></li>\n</ul>\n<p>It will be automatically converted as shown above so that you can declare the type as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> s<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> n<span class=\"token operator\">:</span> Number <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the code above, the type of the value Code eventually returns at <code class=\"language-text\">JavaScript</code> runtime is a primitive. <code class=\"language-text\">Typescript</code> allows declarations that assign a primitive type to an object wrapper.</p>","frontmatter":{"title":"Effective TypeScript 2","date":"July 08, 2023","description":"This is a written summary based on my understanding after reading \"Effective TypeScript.","category":"TypeScript"}},"previous":{"fields":{"slug":"/move-my-blog/"},"frontmatter":{"title":"Moving a Blog"}},"next":{"fields":{"slug":"/execution-context/"},"frontmatter":{"title":"Execution Context"}}},"pageContext":{"id":"a568ad36-2a5a-5b29-9e60-2671c3690826","previousPostId":"10a92a37-3355-5f01-8c01-51bac79edb46","nextPostId":"9a6abcd1-683c-5bf6-8107-cd16c96e19cf"}},"staticQueryHashes":["707948987","805692932"],"slicesMap":{}}