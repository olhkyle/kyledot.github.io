{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-typescript-3/","result":{"data":{"site":{"siteMetadata":{"title":"Kyle.dot"}},"markdownRemark":{"id":"3d9a128e-679a-59eb-81b4-3b3708f9f15a","excerpt":"The following text is a summary based on my understanding after reading \"Effective TypeScript\" 14. Reducing Type Calculation using Type Manipulation and…","html":"<blockquote>\n<p>The following text is a summary based on my understanding after reading <strong>\"Effective TypeScript\"</strong></p>\n</blockquote>\n<h2>14. Reducing Type Calculation using Type Manipulation and Generics</h2>\n<h3>01 Utilize Mapped Type</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n\tuserId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tpageTitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\trecentFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tpageContents<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token punctuation\">{</span>\n\tuserId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tpageTitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\trecentFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Defining <code class=\"language-text\">TopNavState</code> as subset of <code class=\"language-text\">State</code> is more <strong>desirable</strong> than declaring interface <code class=\"language-text\">State</code> extending <code class=\"language-text\">TopNavState</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tuserId<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tpageTitle<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'pageTitle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\trecentFiles<span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token string\">'recentFiles'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Like <strong>type alias</strong> above, if <code class=\"language-text\">pageTitle</code> property's type of <code class=\"language-text\">State</code> type is changed, modification is in need because it's also reflected in <code class=\"language-text\">TopNavState</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token string\">'userId'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'pageTitle'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'recentFiles'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Like the example code above, it is the same way as <strong>looping</strong> through the fields an array of <strong>Mapped Types</strong>. This pattern can be found on the standard <code class=\"language-text\">TypeScript</code> Library, and it's called <code class=\"language-text\">Pick</code>.</p>\n<h3>02 <code class=\"language-text\">Pick</code> &#x26; <code class=\"language-text\">Mapped Type</code></h3>\n<h4>Basic use of Mapped Type</h4>\n<p>We can see that <code class=\"language-text\">Mapped Type</code> can be thought of as applying <code class=\"language-text\">map</code> method to the <strong>Type</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In terms of removing the duplicate code as <strong>Generics</strong>, the use of <code class=\"language-text\">Pick</code> can be compared to <strong>calling a function</strong>.</p>\n<p>In <strong>Tagged Union</strong> as shown below, other type of duplication can happen.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SaveAction</span> <span class=\"token punctuation\">{</span>\n\ttype<span class=\"token operator\">:</span> <span class=\"token string\">'save'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoadAction</span> <span class=\"token punctuation\">{</span>\n\ttype<span class=\"token operator\">:</span> <span class=\"token string\">'load'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> SaveAction <span class=\"token operator\">|</span> LoadAction<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// type ActionType = 'save' | 'load'; // 중복 발생</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionType</span> <span class=\"token operator\">=</span> Action<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionRec</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Action<span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>03 If we want to define <code class=\"language-text\">Class</code> that is updated after creation?</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n\tw<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\th<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\tcolor<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tlabel<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">OptionsUpdate</span> <span class=\"token punctuation\">{</span>\n\tw<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\th<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\tcolor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tlabel<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">UI</span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>init<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>init <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 중복</span>\n\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> OptionsUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// partial</span>\n\t<span class=\"token function\">create</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>Options<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionsUpdate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Options<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> Options<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Partial과 같다</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionsKeys</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Options<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></code></pre></div>\n<h3>04 If we want to create <strong>Named Type</strong> for the <strong>return type</strong> of Function or Method?</h3>\n<blockquote>\n<p>In <code class=\"language-text\">TypeScript</code>, there are two ways of defining Named Type.</p>\n<p>➡️ type alias | interface</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tuserId<span class=\"token punctuation\">,</span>\n\t\tname<span class=\"token punctuation\">,</span>\n\t\tage<span class=\"token punctuation\">,</span>\n\t\tcolor<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> getUserInfo<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\ntype UserInfo = {  \n\tuserId: string;  \n\tname: string;  \n\tage: number;  \n\tcolor: string;  \n}*/</span></code></pre></div>\n<h4><code class=\"language-text\">Generics</code> is a kind of <code class=\"language-text\">function</code> for a <code class=\"language-text\">type</code>.</h4>\n<blockquote>\n<p><code class=\"language-text\">Function</code> is useful for preserving <strong>DRY</strong>(Don't repeat yourself) principle. As the type system is used to limit the values that can be mapped to <code class=\"language-text\">parameter</code>s in <code class=\"language-text\">function</code>, it's necessary to limit <code class=\"language-text\">parameter</code>s in <code class=\"language-text\">Generics</code>.</p>\n</blockquote>\n<p>The definition of <code class=\"language-text\">Pick</code> type which defined as a <code class=\"language-text\">Mapped Type</code> above results in the error like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Type 'K' is not assignable to type 'string | number | symbol'</span></code></pre></div>\n<p>Since <code class=\"language-text\">K</code> is not relevant to <code class=\"language-text\">T</code> type too wide a range, <code class=\"language-text\">K</code> should be <code class=\"language-text\">number | string | symbol</code> type which can be used as a <strong>Property Key</strong>, and should be narrowed. This can be defined as below.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>If we think of <strong>type</strong> as a set of values, <strong>A extends B</strong> means that A is the subset of B.</p>\n</blockquote>\n<br/>\n<br/>\n<hr/>\n<h2>15. Use of Dynamic Data and <code class=\"language-text\">Index Signature</code></h2>\n<h3>01 Index Signature</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Rocket</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>property<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rocket<span class=\"token operator\">:</span> Rocket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">'naroho'</span><span class=\"token punctuation\">,</span>\n\tversion<span class=\"token operator\">:</span> <span class=\"token string\">'v1.0'</span><span class=\"token punctuation\">,</span>\n\tthrust<span class=\"token operator\">:</span> <span class=\"token string\">'4,940 KN'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Like above, <code class=\"language-text\">[property: string] : string</code> is called <code class=\"language-text\">Index Signature</code>. It contains 3 pieces of information.</p>\n<ul>\n<li><code class=\"language-text\">Key</code> Name : It's used to show the position of <code class=\"language-text\">key</code>. And It's reference that can be ignored because it's not used by <strong>type checker</strong>.</li>\n<li><code class=\"language-text\">Key</code> Type : It should be combination of <code class=\"language-text\">string | number | symbol</code>.</li>\n<li><code class=\"language-text\">Value</code> Type : It can be <strong>any type</strong> being used in JavaScript.</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<p>But, there are <strong>4 disadvantages</strong> to type checking like above.</p>\n<ol>\n<li><strong>Type Checker</strong> allows all key types including wrong key. Instead of using <code class=\"language-text\">name</code>, using <code class=\"language-text\">Name</code> with PascalCase can be valid type.</li>\n<li><strong>Specific Key</strong> is not necessary. <code class=\"language-text\">{}</code> value can be allocated on variable.\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> emptyObj<span class=\"token operator\">:</span> Rocket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>Different Types are not allowed for different Keys. Property <code class=\"language-text\">thrust</code> type is not <code class=\"language-text\">string</code> type but <code class=\"language-text\">number</code> type.</li>\n<li>The <code class=\"language-text\">key</code> can be named anything, so <strong>Autocomplete</strong> doesn't work in the IDE.</li>\n</ol>\n<p>Because of disadvantages like above, Index Signature is not exact. So It could be better to defined type using <code class=\"language-text\">interface</code>.</p>\n<br/>\n<br/>\n<p>However, if we are representing <strong>dynamic data</strong>, <code class=\"language-text\">Index Signature</code> is useful.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>header<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> headerColumns <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>rowStr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> row<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\trowStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\trow<span class=\"token punctuation\">[</span>headerColumns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cell<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> row<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Above, there is a <strong>CSV file</strong> where the <strong>row</strong>s have <strong>column</strong> names, and we want to represent the rows of data as an object that maps column names to values. In a typical situation, there is no way to know in advance what the column names are, so we use <code class=\"language-text\">Index Signature</code>.</p>\n<p>On the other hand, if <code class=\"language-text\">parseCSV</code> is used in a specific situation where you do know the column names, you'll use <strong>assertion</strong> as a pre-declared type.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductRow</span> <span class=\"token punctuation\">{</span>\n\tproductId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tprice<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> csvData<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>csvData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword\">as</span> ProductRow<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>At <strong>runtime</strong>, there may not actually be a value corresponding to a property key of the <code class=\"language-text\">ProductRow</code> type, so <code class=\"language-text\">undefined</code> type can be used in conjunction with the union type for a safer approach, and at the same time to <strong>proactively</strong> prevent errors from the <strong>compilation</strong> stage.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">safeParseCSV</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Also, if we don't know how many <strong>property</strong> keys will exist in our <code class=\"language-text\">ProductRow</code> type, it may be best to define them as <strong>Optional Fields</strong> or <strong>Union Types</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductRow1</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">[</span>column<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductRow2</span> <span class=\"token punctuation\">{</span>\n\tproductId<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tname<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tprice<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// prettier-ignore</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ProductRow3</span> <span class=\"token operator\">=</span> \n\t<span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> productId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> \n\t<span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> productId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> \n\t<span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> productId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> price<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> \n\t<span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> productId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> price<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The way like <code class=\"language-text\">ProductRow3</code> might be more accurate, but it's very <strong>hassle</strong> to use. So, if we use <code class=\"language-text\">Record</code> Type, we can declare type more accurate and flexible.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ProductRow</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">'productId'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Or, we can utilize <code class=\"language-text\">Mapped Type</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ProductRow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token string\">'productId'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ProductRowOption</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token string\">'productId'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> key <span class=\"token keyword\">extends</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>When representing <strong>Dynamic Data</strong>, use <code class=\"language-text\">Index Signature</code> and, if possible, define types more precisely using <code class=\"language-text\">interface</code>, <code class=\"language-text\">Record</code>, and <code class=\"language-text\">Mapped Type</code>.</p>\n</blockquote>\n<br/>\n<br/>\n<br/>\n<br/>","frontmatter":{"title":"Effective TypeScript 3","date":"September 02, 2023","description":"This is a written summary based on my understanding after reading \"Effective TypeScript.","category":"TypeScript"}},"previous":{"fields":{"slug":"/retrospect-2023-08/"},"frontmatter":{"title":"Deploy 2023.01-08"}},"next":{"fields":{"slug":"/fineapple-project-retrospect/"},"frontmatter":{"title":"FineApple Project Retrospect"}}},"pageContext":{"id":"3d9a128e-679a-59eb-81b4-3b3708f9f15a","previousPostId":"1162dbca-f788-5db7-b792-1d51bc237584","nextPostId":"b4e3a410-3baf-55a4-a229-70b31104d452"}},"staticQueryHashes":["707948987","805692932"],"slicesMap":{}}